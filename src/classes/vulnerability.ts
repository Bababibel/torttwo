import Evidence from './evidence'
import Instance from './instance'

export enum severity {
  INFORMATIONAL = 0,
  LOW = 1,
  MEDIUM = 2,
  HIGH = 3,
  CRITICAL = 4
}
export enum vulnState {
  IN_PROGRESS,
  TO_BE_FINISHED,
  FINISHED
}

export default class Vulnerability {
  title = ''
  description = ''
  instances: Instance[] = []
  steps: string[] = []
  evidences: Evidence[] = []
  likelihood: severity = severity.INFORMATIONAL
  impact: severity = severity.INFORMATIONAL
  severity: severity = severity.INFORMATIONAL
  cweId = ''
  remediations = ''
  
  // State management
  state: vulnState = vulnState.IN_PROGRESS


  import(obj: Object) {
    // Parse Vulnerability from JSON
    // /!\ can throw exception(s)
    if (Object.keys(obj) === Object.keys(this)) {
      throw new ReferenceError(`Given Vulnerability object ${Object.keys(obj)} has not the expected properties ${Object.keys(this)} and can not be converted in the corresponding class.`)
    }
    const vuln = obj as Vulnerability
    this.title = vuln.title.toString()
    this.description = vuln.description.toString()
    this.instances = Array.from(vuln.instances).map(inst => new Instance(inst))
    this.steps = Array.from(vuln.steps).map(step => step.toString())
    this.evidences = Array.from(vuln.evidences).map(inst => new Evidence(inst))
    if (!Object.values(severity).includes(vuln.likelihood))
      throw new TypeError(`Unexpected value for likelihood: ${vuln.likelihood}`)
    this.likelihood = vuln.likelihood.toString() as unknown as severity
    if (!Object.values(severity).includes(vuln.impact))
      throw new TypeError(`Unexpected value for impact: ${vuln.impact}`)
    this.impact = vuln.impact.toString() as unknown as severity
    if (!Object.values(severity).includes(vuln.severity))
      throw new TypeError(`Unexpected value for severity: ${vuln.severity}`)
    this.severity = vuln.severity.toString() as unknown as severity
    this.cweId = vuln.cweId.toString()
    this.remediations = vuln.remediations.toString()

    if (!Object.values(vulnState).includes(vuln.state))
      throw new TypeError(`Unexpected value for state: ${vuln.state}`)
    this.state = vuln.state.toString() as unknown as vulnState

    
  }

}